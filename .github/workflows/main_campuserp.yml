name: Build and Deploy Node.js App to Azure Web App - CampusERP
permissions:
  id-token: write
  contents: read
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install Dependencies
        shell: pwsh
        run: |
          Write-Host "Installing dependencies..."
          npm ci
          npm install -g prisma
          Write-Host "Dependencies installed successfully"

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build TypeScript
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Prepare Deployment Package
        shell: pwsh
        run: |
          Write-Host "Creating deployment package..."

          # Create clean deployment directory
          Remove-Item -Path deploy -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -Path deploy -ItemType Directory

          # Copy build files
          Copy-Item -Path "dist" -Destination "deploy" -Recurse
          Copy-Item -Path "package.json" -Destination "deploy"
          Copy-Item -Path "package-lock.json" -Destination "deploy"
          Copy-Item -Path "web.config" -Destination "deploy"
          Copy-Item -Path "prisma" -Destination "deploy" -Recurse

          # Install production dependencies
          Set-Location deploy
          npm install --omit=dev
          npm install @prisma/client
          Remove-Item package-lock.json -Force -ErrorAction SilentlyContinue

          # Create iisnode logs directory
          New-Item -Path "iisnode" -ItemType Directory

          # Set IIS directory permissions
          icacls . /grant "BUILTIN\IIS_IUSRS:(OI)(CI)(F)"

          # Create deployment package
          Compress-Archive -Path * -DestinationPath ..\release.zip -Force
          Set-Location ..

          Write-Host "Deployment package created successfully"

      - name: Upload Artifact for Deployment
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: "production"
      url: https://campuserp.azurewebsites.net
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Azure Web App
        shell: pwsh
        run: |
          Write-Host "Setting up Node.js runtime..."
          $runtimeResult = az webapp config set `
              --name CampusERP `
              --resource-group CampusERP_group `
              --windows-fx-version 'NODE|20' `
              --startup-file "dist/index.js"

          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to configure runtime stack: $runtimeResult"
              exit 1
          }

          Write-Host "Configuring app settings..."
          $settings = @(
              "SCM_DO_BUILD_DURING_DEPLOYMENT=false",
              "WEBSITE_RUN_FROM_PACKAGE=0",
              "WEBSITE_NODE_DEFAULT_VERSION=20",
              "NODE_ENV=production",
              "DATABASE_URL=${{ secrets.DATABASE_URL }}",
              "WEBSITE_HTTPLOGGING_RETENTION_DAYS=7",
              "AZURE_WEBSITE_HOSTNAME=campuserp.azurewebsites.net"
          )

          $settingsResult = az webapp config appsettings set `
              --name CampusERP `
              --resource-group CampusERP_group `
              --settings $settings

          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to configure app settings: $settingsResult"
              exit 1
          }

          Write-Host "App configuration completed successfully"

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: "CampusERP"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: release.zip

      - name: Restart Web App
        shell: pwsh
        run: |
          Write-Host "Restarting web app..."
          az webapp restart --name CampusERP --resource-group CampusERP_group
          Write-Host "Web app restart completed"

      - name: Logout from Azure
        run: az logout
        if: always()
